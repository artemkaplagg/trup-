import { createTool } from "@mastra/core/tools";
import type { IMastraLogger } from "@mastra/core/logger";
import { z } from "zod";

// ID —É—á–µ–Ω–∏–∫–æ–≤ 1-–π –≥—Ä—É–ø–ø—ã
const GROUP_1_IDS = [
  5566682926, 5241074325, 860000457, 6185367393, 8481372472,
  5029724753, 5650809687, 1942365829, 5552226319, 995840535,
  5760286438, 5379148476, 1236979350, 5339589336, 6558632830,
  1240354802
];

// ID —É—á–µ–Ω–∏–∫–æ–≤ 2-–π –≥—Ä—É–ø–ø—ã  
const GROUP_2_IDS = [
  5900078758, 1131216176, 5441600087, 5579250278, 1947836002,
  2018725205, 5530293880
];

export const groupDetectionTool = createTool({
  id: "group-detection-tool",
  description: "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ 1-–π –∏–ª–∏ 2-–π –≥—Ä—É–ø–ø–µ –∫–ª–∞—Å—Å–∞ –ø–æ –µ–≥–æ Telegram ID",
  inputSchema: z.object({
    userId: z.number().describe("Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"),
  }),
  outputSchema: z.object({
    group: z.number().nullable().describe("–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1 –∏–ª–∏ 2), null –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"),
    groupName: z.string().describe("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"),
    isGroupMember: z.boolean().describe("–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–ª–µ–Ω–æ–º –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø—ã"),
  }),
  execute: async ({ context: { userId }, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üë• [GroupDetection] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId });

    let group: number | null;
    let groupName: string;
    let isGroupMember: boolean = true;

    if (GROUP_1_IDS.includes(userId)) {
      group = 1;
      groupName = "1-—è –≥—Ä—É–ø–ø–∞";
      logger?.info('üìù [GroupDetection] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ 1-–π –≥—Ä—É–ø–ø–µ', { userId });
    } else if (GROUP_2_IDS.includes(userId)) {
      group = 2;
      groupName = "2-—è –≥—Ä—É–ø–ø–∞";
      logger?.info('üìù [GroupDetection] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ 2-–π –≥—Ä—É–ø–ø–µ', { userId });
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      group = null;
      groupName = "–ì—Ä—É–ø–ø–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞";
      isGroupMember = false;
      logger?.warn('‚ö†Ô∏è [GroupDetection] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–∞—Ö –≥—Ä—É–ø–ø', { userId });
    }

    const result = {
      group,
      groupName,
      isGroupMember
    };

    logger?.info('‚úÖ [GroupDetection] –ì—Ä—É–ø–ø–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞', { userId, result });
    
    return result;
  },
});