import { createTool } from "@mastra/core/tools";
import type { IMastraLogger } from "@mastra/core/logger";
import { z } from "zod";

// –¢–∏–ø—ã –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
interface HomeworkItem {
  id: string;
  subject: string;
  description: string;
  dueDate: string;
  createdBy: number;
  createdAt: string;
  group?: number; // 1 –∏–ª–∏ 2, undefined –æ–∑–Ω–∞—á–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
let homeworkStorage: HomeworkItem[] = [];

export const homeworkManagementTool = createTool({
  id: "homework-management-tool", 
  description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –î–ó",
  inputSchema: z.object({
    action: z.enum(["add", "list", "delete", "edit", "get_by_subject"]).describe("–î–µ–π—Å—Ç–≤–∏–µ —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏"),
    userId: z.number().describe("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ"),
    userRole: z.enum(["owner", "admin", "student", "unauthorized"]).describe("–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –î–ó
    subject: z.string().optional().describe("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"),
    description: z.string().optional().describe("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"),
    dueDate: z.string().optional().describe("–°—Ä–æ–∫ —Å–¥–∞—á–∏ (–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)"),
    group: z.number().optional().describe("–ì—Ä—É–ø–ø–∞ –¥–ª—è –î–ó (1 –∏–ª–∏ 2), –Ω–µ —É–∫–∞–∑–∞–Ω–æ = –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø"),
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    homeworkId: z.string().optional().describe("ID –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è"),
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    filterGroup: z.number().optional().describe("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –î–ó –ø–æ –≥—Ä—É–ø–ø–µ"),
    showOnlyActive: z.boolean().default(true).describe("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –î–ó (–Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ)")
  }),
  outputSchema: z.object({
    success: z.boolean().describe("–£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è"),
    message: z.string().describe("–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"),
    data: z.any().optional().describe("–î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Å–ø–∏—Å–æ–∫ –î–ó, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –î–ó –∏ —Ç.–¥.)"),
    error: z.string().optional().describe("–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞")
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { action, userId, userRole, subject, description, dueDate, group, homeworkId, filterGroup, showOnlyActive } = context;
    
    logger?.info('üìö [HomeworkManagement] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –î–ó', { action, userId, userRole });

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (userRole === "unauthorized") {
        return {
          success: false,
          message: "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.",
          error: "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø"
        };
      }

      switch (action) {
        case "add":
          return await addHomework({ userId, userRole, subject, description, dueDate, group, logger });
        
        case "list":
          return await listHomework({ filterGroup, showOnlyActive, logger });
        
        case "delete":
          return await deleteHomework({ userId, userRole, homeworkId, logger });
        
        case "edit":
          return await editHomework({ userId, userRole, homeworkId, subject, description, dueDate, group, logger });
        
        case "get_by_subject":
          return await getHomeworkBySubject({ subject, filterGroup, logger });
        
        default:
          return {
            success: false,
            message: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            error: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
          };
      }
    } catch (error) {
      logger?.error('‚ùå [HomeworkManagement] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', { 
        action, 
        userId, 
        error: error instanceof Error ? error.message : String(error)
      });
      
      return {
        success: false,
        message: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏",
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
      };
    }
  },
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
async function addHomework(params: {
  userId: number;
  userRole: string;
  subject?: string;
  description?: string;
  dueDate?: string;
  group?: number;
  logger?: IMastraLogger;
}) {
  const { userId, userRole, subject, description, dueDate, group, logger } = params;
  
  // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –î–ó
  if (userRole !== "admin" && userRole !== "owner") {
    return {
      success: false,
      message: "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.",
      error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
    };
  }

  if (!subject || !description || !dueDate) {
    return {
      success: false,
      message: "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Ä–æ–∫ —Å–¥–∞—á–∏",
      error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
    };
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
  const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
  if (!dateRegex.test(dueDate)) {
    return {
      success: false,
      message: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25)",
      error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"
    };
  }

  const parsedDate = new Date(dueDate);
  if (isNaN(parsedDate.getTime())) {
    return {
      success: false,
      message: "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞",
      error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"
    };
  }

  const homeworkId = `hw_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  const newHomework: HomeworkItem = {
    id: homeworkId,
    subject,
    description,
    dueDate,
    createdBy: userId,
    createdAt: new Date().toISOString(),
    group
  };

  homeworkStorage.push(newHomework);
  
  logger?.info('‚úÖ [HomeworkManagement] –î–ó –¥–æ–±–∞–≤–ª–µ–Ω–æ', { homeworkId, subject, group });
  
  const groupText = group ? `–¥–ª—è ${group}-–π –≥—Ä—É–ø–ø—ã` : "–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø";
  return {
    success: true,
    message: `‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\nüìñ –ü—Ä–µ–¥–º–µ—Ç: ${subject}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}\nüìÖ –°—Ä–æ–∫ —Å–¥–∞—á–∏: ${dueDate}\nüë• ${groupText}`,
    data: newHomework
  };
}

async function listHomework(params: {
  filterGroup?: number;
  showOnlyActive: boolean;
  logger?: IMastraLogger;
}) {
  const { filterGroup, showOnlyActive, logger } = params;
  
  let filteredHomework = [...homeworkStorage];
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–µ
  if (filterGroup) {
    filteredHomework = filteredHomework.filter(hw => 
      hw.group === filterGroup || hw.group === undefined
    );
  }
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ)
  if (showOnlyActive) {
    const now = new Date();
    filteredHomework = filteredHomework.filter(hw => 
      new Date(hw.dueDate) >= now
    );
  }
  
  logger?.info('üìã [HomeworkManagement] –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –î–ó', { 
    total: filteredHomework.length, 
    filterGroup, 
    showOnlyActive 
  });
  
  if (filteredHomework.length === 0) {
    return {
      success: true,
      message: "üìã –î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
      data: []
    };
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
  const homeworkList = filteredHomework
    .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())
    .map((hw, index) => {
      const groupText = hw.group ? ` (${hw.group}-—è –≥—Ä—É–ø–ø–∞)` : " (–≤—Å–µ –≥—Ä—É–ø–ø—ã)";
      const isOverdue = new Date(hw.dueDate) < new Date();
      const statusEmoji = isOverdue ? "‚è∞" : "üìÖ";
      
      return `${index + 1}. ${statusEmoji} ${hw.subject}${groupText}\n` +
             `   üìù ${hw.description}\n` +
             `   üìÖ –î–æ: ${hw.dueDate}`;
    })
    .join('\n\n');
  
  return {
    success: true,
    message: `üìö –°–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π:\n\n${homeworkList}`,
    data: filteredHomework
  };
}

async function deleteHomework(params: {
  userId: number;
  userRole: string;
  homeworkId?: string;
  logger?: IMastraLogger;
}) {
  const { userId, userRole, homeworkId, logger } = params;
  
  // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –î–ó
  if (userRole !== "admin" && userRole !== "owner") {
    return {
      success: false,
      message: "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.",
      error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
    };
  }

  if (!homeworkId) {
    return {
      success: false,
      message: "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
      error: "–ù–µ —É–∫–∞–∑–∞–Ω ID"
    };
  }

  const index = homeworkStorage.findIndex(hw => hw.id === homeworkId);
  if (index === -1) {
    return {
      success: false,
      message: "‚ùå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
      error: "–î–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    };
  }

  const deletedHomework = homeworkStorage.splice(index, 1)[0];
  
  logger?.info('üóëÔ∏è [HomeworkManagement] –î–ó —É–¥–∞–ª–µ–Ω–æ', { homeworkId, subject: deletedHomework.subject });
  
  return {
    success: true,
    message: `‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: ${deletedHomework.subject}`,
    data: deletedHomework
  };
}

async function editHomework(params: {
  userId: number;
  userRole: string;
  homeworkId?: string;
  subject?: string;
  description?: string;
  dueDate?: string;
  group?: number;
  logger?: IMastraLogger;
}) {
  const { userId, userRole, homeworkId, subject, description, dueDate, group, logger } = params;
  
  // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–ó
  if (userRole !== "admin" && userRole !== "owner") {
    return {
      success: false,
      message: "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.",
      error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
    };
  }

  if (!homeworkId) {
    return {
      success: false,
      message: "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
      error: "–ù–µ —É–∫–∞–∑–∞–Ω ID"
    };
  }

  const homework = homeworkStorage.find(hw => hw.id === homeworkId);
  if (!homework) {
    return {
      success: false,
      message: "‚ùå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
      error: "–î–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    };
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
  if (subject) homework.subject = subject;
  if (description) homework.description = description;
  if (dueDate) homework.dueDate = dueDate;
  if (group !== undefined) homework.group = group;
  
  logger?.info('‚úèÔ∏è [HomeworkManagement] –î–ó –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ', { homeworkId, subject: homework.subject });
  
  const groupText = homework.group ? `–¥–ª—è ${homework.group}-–π –≥—Ä—É–ø–ø—ã` : "–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø";
  return {
    success: true,
    message: `‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\nüìñ –ü—Ä–µ–¥–º–µ—Ç: ${homework.subject}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${homework.description}\nüìÖ –°—Ä–æ–∫ —Å–¥–∞—á–∏: ${homework.dueDate}\nüë• ${groupText}`,
    data: homework
  };
}

async function getHomeworkBySubject(params: {
  subject?: string;
  filterGroup?: number;
  logger?: IMastraLogger;
}) {
  const { subject, filterGroup, logger } = params;
  
  if (!subject) {
    return {
      success: false,
      message: "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞",
      error: "–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–º–µ—Ç"
    };
  }

  let filteredHomework = homeworkStorage.filter(hw => 
    hw.subject.toLowerCase().includes(subject.toLowerCase())
  );
  
  if (filterGroup) {
    filteredHomework = filteredHomework.filter(hw => 
      hw.group === filterGroup || hw.group === undefined
    );
  }
  
  logger?.info('üîç [HomeworkManagement] –ü–æ–∏—Å–∫ –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É', { subject, found: filteredHomework.length });
  
  if (filteredHomework.length === 0) {
    return {
      success: true,
      message: `üìã –î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "${subject}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`,
      data: []
    };
  }
  
  const homeworkList = filteredHomework
    .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())
    .map((hw, index) => {
      const groupText = hw.group ? ` (${hw.group}-—è –≥—Ä—É–ø–ø–∞)` : " (–≤—Å–µ –≥—Ä—É–ø–ø—ã)";
      const isOverdue = new Date(hw.dueDate) < new Date();
      const statusEmoji = isOverdue ? "‚è∞" : "üìÖ";
      
      return `${index + 1}. ${statusEmoji} ${hw.subject}${groupText}\n` +
             `   üìù ${hw.description}\n` +
             `   üìÖ –î–æ: ${hw.dueDate}`;
    })
    .join('\n\n');
  
  return {
    success: true,
    message: `üìö –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "${subject}":\n\n${homeworkList}`,
    data: filteredHomework
  };
}